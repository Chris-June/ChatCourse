import {
  Link,
  useNavigate,
} from 'react-router-dom';
import {
  ChevronLeft,
  ChevronRight,
  GitMerge,
  Code,
  Bot,
  Puzzle,
  Wrench,
  BookOpen,
} from 'lucide-react';
import { useProgressStore } from '@/store/progressStore';
import FunctionCallFlowVisualizer from '@/pages/instructions/components/FunctionCallFlowVisualizer';
import FunctionSchemaDesigner from '@/pages/instructions/components/FunctionSchemaDesigner';
import FunctionCallGrader from '@/pages/instructions/components/FunctionCallGrader';
import ToolChoiceChallenge from '@/pages/instructions/components/ToolChoiceChallenge';
import FunctionCallDebugger from '@/pages/instructions/components/FunctionCallDebugger';
import LessonTemplate from '@/components/layouts/LessonTemplate';
import {
  Accordion,
  AccordionContent,
  AccordionItem,
  AccordionTrigger,
} from '@/components/ui/accordion';
import { Button } from '@/components/ui/button';
import ModuleQuizzes from '@/pages/instructions/modules/ModuleQuizzes/ModuleQuizzes';

export default function Lesson7_1() {
  const navigate = useNavigate();
  const { completeLesson } = useProgressStore();

  const handleNext = () => {
    completeLesson(7, 1);
    navigate('/instructions/module-7/7.2');
  };

  const quizQuestions = [
    {
      questionText:
        'In a successful function call, what is the correct sequence of events?',
      options: [
        'User -> LLM -> Tool Execution -> Final Response to User',
        'User -> Tool Execution -> LLM -> Final Response to User',
        'User -> LLM (decides to use tool) -> LLM (generates tool arguments) -> Tool Execution -> LLM (processes tool output) -> Final Response to User',
        'LLM -> User -> Tool Execution -> Final Response to User',
      ],
      correctAnswer:
        'User -> LLM (decides to use tool) -> LLM (generates tool arguments) -> Tool Execution -> LLM (processes tool output) -> Final Response to User',
      explanation:
        "Function calling is a multi-step process where the LLM first interprets the user's request, calls the tool with the right arguments, gets the result back, and then formulates a final answer.",
    },
    {
      questionText:
        "What is the purpose of the `required` array in a function's JSON schema?",
      options: [
        'To list all possible parameters the function can accept.',
        'To tell the LLM which parameters are optional.',
        'To specify which parameters the LLM *must* provide for the function to be called correctly.',
        'To describe what the function does in plain English.',
      ],
      correctAnswer:
        'To specify which parameters the LLM *must* provide for the function to be called correctly.',
      explanation:
        'The `required` array is critical for ensuring the LLM extracts and provides all the necessary information, preventing errors from missing arguments.',
    },
    {
      questionText:
        'When an LLM has multiple tools, how does it primarily decide which one to use for a given prompt?',
      options: [
        'It chooses the tool with the fewest parameters.',
        'It chooses the tool with the most interesting name.',
        "It relies on the clarity and accuracy of the `description` field in each tool's schema.",
        'It always picks the first tool in the list.',
      ],
      correctAnswer:
        "It relies on the clarity and accuracy of the `description` field in each tool's schema.",
      explanation:
        "The function description is the most important piece of information the LLM uses to understand a tool's purpose and match it to the user's intent.",
    },
    {
      questionText:
        "A user writes: 'Book a flight for me.' The `book_flight` tool requires `destination` and `date`. Why might the function call fail?",
      options: [
        'The user was not polite enough.',
        'The user did not provide the required `destination` and `date` parameters in their prompt.',
        'The tool is probably broken.',
        'The LLM does not know how to book flights.',
      ],
      correctAnswer:
        'The user did not provide the required `destination` and `date` parameters in their prompt.',
      explanation:
        "For a successful function call, the user's prompt must contain enough information for the LLM to extract all the parameters listed as `required` in the schema.",
    },
    {
      questionText: 'What is a common reason for a function call to fail during debugging?',
      options: [
        "The user's internet is too slow.",
        'The JSON arguments generated by the LLM do not match the function schema (e.g., wrong data type, missing required field).',
        'The tool description is too long.',
        'The model is tired.',
      ],
      correctAnswer:
        'The JSON arguments generated by the LLM do not match the function schema (e.g., wrong data type, missing required field).',
      explanation:
        'A schema mismatch is the most frequent cause of errors. The arguments must be valid JSON that perfectly adheres to the types and requirements defined in the tool schema.',
    },
  ];

  const weatherFunctionSchema = {
    name: 'get_weather',
    description: 'Get the current weather in a given location',
    parameters: {
      type: 'object',
      properties: {
        location: {
          type: 'string',
          description: 'The city and state, e.g. San Francisco, CA',
        },
        unit: { type: 'string', enum: ['celsius', 'fahrenheit'] },
      },
      required: ['location'],
    },
  };

  const graderCriteria = [
    {
      id: 'trigger-word',
      label: 'Includes a trigger word (e.g., "weather", "forecast")',
      description: 'The prompt should use words that clearly signal the desired action.',
      passes: (prompt: string) =>
        /weather|forecast|temperature/i.test(prompt),
      weight: 40,
    },
    {
      id: 'has-location',
      label: 'Specifies a location (e.g., "San Francisco")',
      description: 'The function requires a location to provide a forecast.',
      passes: (prompt: string) =>
        /(in|for|at|of) [A-Za-z\s]+/.test(prompt) &&
        !/unit|format/.test(prompt),
      weight: 40,
    },
    {
      id: 'has-unit',
      label: 'Optionally specifies a temperature unit (e.g., "Celsius")',
      description: 'The prompt can optionally specify the temperature unit.',
      passes: (prompt: string) => /celsius|fahrenheit/i.test(prompt),
      weight: 20,
    },
  ];

  return (
    <LessonTemplate
      moduleNumber={7}
      lessonNumber={1}
      title="Giving Your AI Tools"
      subtitle="An introduction to function calling and tool use."
    >
      <div className="space-y-6 text-card-foreground">
        <div className="bg-muted/30 border border-border rounded-xl p-4">
          <p className="text-xs text-muted-foreground mb-2">Estimated time: 14–18 minutes</p>
          <h3 className="font-semibold text-foreground mb-2">What you'll learn</h3>
          <ul className="list-disc pl-5 text-sm text-muted-foreground space-y-1">
            <li>What function calling is and why it matters</li>
            <li>Designing clear tool schemas and descriptions</li>
            <li>Writing prompts that reliably trigger tools</li>
          </ul>
        </div>
        {/* Myth vs Reality */}
        <section className="bg-muted/30 border border-border rounded-xl p-4">
          <h3 className="text-lg font-semibold text-foreground mb-2">Myth vs. Reality</h3>
          <div className="grid md:grid-cols-2 gap-3">
            <div className="bg-background border border-border rounded-lg p-3">
              <h4 className="font-semibold text-destructive mb-1">Myth</h4>
              <p className="text-sm text-muted-foreground">“Function calling is just the model deciding to run some code.”</p>
            </div>
            <div className="bg-background border border-border rounded-lg p-3">
              <h4 className="font-semibold text-success mb-1">Reality</h4>
              <p className="text-sm text-muted-foreground">Function calling is a structured, multi‑step protocol requiring precise schemas and well‑formed arguments. Clear descriptions and required fields are critical.</p>
            </div>
          </div>
        </section>
        <p className="text-muted-foreground">
          By default, an LLM is a brilliant conversationalist trapped in a box.
          It can't check the weather, book a flight, or search your database.
          Function calling is the magic that opens the box, giving your AI hands
          and eyes to interact with the outside world through tools you provide.
        </p>

        <Accordion type="single" collapsible className="w-full" defaultValue="item-1">
          <AccordionItem value="item-1">
            <AccordionTrigger className="text-left hover:no-underline">
              <div className="flex items-center">
                <GitMerge className="w-5 h-5 mr-2 text-primary" />
                The Function Call Flow
              </div>
            </AccordionTrigger>
            <AccordionContent className="space-y-4 pt-4">
              <p className="text-muted-foreground">
                Think of your AI as a dispatcher and your tools as different
                departments (Police, Fire, Ambulance). The function call process
                is how the dispatcher routes a citizen's request to the correct
                department. This visualizer breaks down the multi-step
                conversation between the User, the AI (Dispatcher), and the
                Tool (Department).
              </p>
              <FunctionCallFlowVisualizer />
            </AccordionContent>
          </AccordionItem>

          <AccordionItem value="item-2">
            <AccordionTrigger className="text-left hover:no-underline">
              <div className="flex items-center">
                <Code className="w-5 h-5 mr-2 text-primary" />
                The Dispatcher's Directory (The Schema)
              </div>
            </AccordionTrigger>
            <AccordionContent className="space-y-4 pt-4">
              <p className="text-muted-foreground">
                The dispatcher's most critical tool is their directory (the JSON
                schema). It lists every department, what they do (`description`),
                and what info they need (`parameters`). A clear, accurate
                directory is essential. Use the designer below to create a
                directory entry for a `send_email` department.
              </p>
              <FunctionSchemaDesigner />
            </AccordionContent>
          </AccordionItem>

          <AccordionItem value="item-3">
            <AccordionTrigger className="text-left hover:no-underline">
              <div className="flex items-center">
                <Bot className="w-5 h-5 mr-2 text-primary" />
                Making the Call (Triggering the Tool)
              </div>
            </AccordionTrigger>
            <AccordionContent className="space-y-4 pt-4">
              <p className="text-muted-foreground">
                The dispatcher can only act on a clear request. Your prompt must
                contain enough information for the dispatcher to find all the
                required info from the directory. Try to write a user request
                that gets a perfect dispatch score.
              </p>
              <FunctionCallGrader
                functionSchema={weatherFunctionSchema}
                initialPrompt="What's the weather like?"
                evaluationCriteria={graderCriteria}
              />
            </AccordionContent>
          </AccordionItem>

          <AccordionItem value="item-4">
            <AccordionTrigger className="text-left hover:no-underline">
              <div className="flex items-center">
                <Puzzle className="w-5 h-5 mr-2 text-primary" />
                Routing the Call (Choosing the Right Department)
              </div>
            </AccordionTrigger>
            <AccordionContent className="space-y-4 pt-4">
              <p className="text-muted-foreground">
                If a user just says "I have a problem," the dispatcher needs to
                figure out who to call. The quality of the `description` in
                your directory is what enables this. Given the user's request
                below, which department is the right call?
              </p>
              <ToolChoiceChallenge />
            </AccordionContent>
          </AccordionItem>

          <AccordionItem value="item-5">
            <AccordionTrigger className="text-left hover:no-underline">
              <div className="flex items-center">
                <Wrench className="w-5 h-5 mr-2 text-primary" />
                Dropped Calls (Debugging)
              </div>
            </AccordionTrigger>
            <AccordionContent className="space-y-4 pt-4">
              <p className="text-muted-foreground">
                Sometimes the dispatcher dials a wrong number or the department
                line is busy. In this final exercise, a dispatch has failed.
                Analyze the request, the faulty directory entry, and the error
                message to diagnose the problem.
              </p>
              <FunctionCallDebugger />
            </AccordionContent>
          </AccordionItem>
        </Accordion>

        <div className="bg-muted/30 border border-border rounded-xl p-4">
          <h3 className="font-semibold text-foreground mb-2">You can now…</h3>
          <ul className="list-disc pl-5 text-sm text-muted-foreground space-y-1">
            <li>Explain function calling at a high level</li>
            <li>Draft a simple JSON schema for a tool</li>
            <li>Write a user prompt that triggers the right tool</li>
          </ul>
        </div>

        {/* Mini‑Glossary */}
        <section className="bg-muted/30 border border-border rounded-xl p-4">
          <h3 className="text-lg font-semibold text-foreground mb-2">Mini‑Glossary</h3>
          <ul className="text-sm text-muted-foreground list-disc list-inside space-y-1">
            <li><strong>Function Calling:</strong> A protocol where the LLM selects a tool and generates JSON arguments to execute it.</li>
            <li><strong>JSON Schema:</strong> The structured definition of a tool’s parameters, including types and <code>required</code> fields.</li>
            <li><strong>Tool Description:</strong> A concise explanation that helps the LLM choose the right tool for a user’s intent.</li>
          </ul>
        </section>

        <div
          id="knowledge-check"
          className="p-6 bg-muted border border-border rounded-lg mt-6"
        >
          <div className="flex items-center mb-4">
            <BookOpen className="w-6 h-6 mr-3 text-primary" />
            <h3 className="text-2xl font-bold text-foreground">
              Knowledge Check
            </h3>
          </div>
          <p className="text-muted-foreground mb-6">
            Test your understanding of function calling.
          </p>
          <ModuleQuizzes questions={quizQuestions} />
        </div>

        <div className="flex justify-between pt-4">
          <Button asChild variant="outline">
            <Link to="/instructions/module-6/6.3">
              <ChevronLeft className="w-4 h-4 mr-2" />
              Previous
            </Link>
          </Button>
          <Button onClick={handleNext}>
            Next Lesson
            <ChevronRight className="w-4 h-4 ml-2" />
          </Button>
        </div>
      </div>
    </LessonTemplate>
  );
}